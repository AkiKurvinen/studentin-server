swagger: '2.0'
info:
  description: |
    StudentIn course project API documentation.
  version: 1.0.0
  title: StudentIn Backend
# host: petstore.swagger.io
# basePath: /v2

# schemes:
# - http
paths:
  /users/:
    post:
      tags:
      - CREATE
      summary: Add new user
      operationId: addUser
      consumes:
      - application/json
      - application/xml
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: User account object
        required: true
        schema:
          $ref: '/definitions/User'
      responses:
        201: 
          description: userId, username, token
        500:
          description: Username already taken
    get:
      tags:
      - READ
      summary: Get all users
      description: Returns list of users
      operationId: getUsers
      produces:
      - application/json
      - application/xml
      responses:
        200:
          description: list of users
          schema:
            $ref: '#/definitions/User'
    patch:
      tags:
      - UPDATE
      summary: Get skill id
      description: Returns skill ID of spesific skill name
      operationId: updateUser
      produces:
      - application/json
      - application/xml
      parameters:
      - name: username
        in: body
        description: username
        type: string
      - name: email
        in: body
        description: user email
        type: string
      - name: hashedPassword
        in: body
        description: user hashed password
        type: string
      - name: title
        in: body
        description: user title
        type: string
      - name: uid
        in: body
        description: user id
        required: true
        type: integer
        
      responses:
        200:
          description: User data
          schema:
            $ref: '#/definitions/User'  
    delete:
      tags:
      - DELETE
      summary: Delete user
      description: Delete user account by user ID
      operationId: deleteUserById
      produces:
      - application/json
      - application/xml
      parameters:
      - name: uid
        in: body
        description: user id
        required: true
        type: integer
      responses:
        200:
          description: success
        500:
          description: failed    
  /projects/:
    post:
      tags:
      - CREATE
      summary: Add new project
      operationId: addProject
      consumes:
      - application/json
      - application/xml
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: Project object
        required: true
        schema:
          $ref: '#/definitions/Project'
      responses:
        201:
          description: projectid
        500:
          description: Missing arguments
    get:
      tags:
      - READ
      summary: Get all projects
      description: Returns list of projects
      operationId: getAllProjects
      produces:
      - application/json
      - application/xml
      responses:
        200:
          description: List of projects
          schema:
            $ref: '#/definitions/Project'
        404:
          description: No projects found
  /memberships/:
      post:
        tags:
        - CREATE
        summary: Add new membership
        operationId: addMemberships
        consumes:
        - application/json
        - application/xml
        produces:
        - application/json
        - application/xml
        parameters:
        - in: body
          name: body
          description: User joins project object
          required: true
          schema:
            $ref: '#/definitions/Project'
        responses:
          201:
            description: Membership added
          500:
            description: Could not add membership
  /skills/:
    post:
      tags:
      - CREATE
      summary: Add new skill
      operationId: addNewSkill
      consumes:
      - application/json
      - application/xml
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: Add new skill
        required: true
        schema:
          $ref: '#/definitions/Skill'
      responses:
        201:
          description: skillId
        500:
          description: Could not add skill
  /talents/:
    post:
      tags:
      - CREATE
      summary: Add new talent (user has a skill)
      operationId: addTalent
      consumes:
      - application/json
      - application/xml
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: Add new talent
        required: true
        schema:
          $ref: '#/definitions/Talent'
      responses:
        201:
          description: Talent added
        500:
          description: Could not add talent
    delete:
      tags:
      - DELETE
      summary: Delete talent from user
      description: Delete talent by user ID and talent ID
      operationId: deleteTalent
      produces:
      - application/json
      - application/xml
      parameters:
      - name: sid
        in: body
        description: skill id
        required: true
        type: integer
      - name: uid
        in: body
        description: user id
        required: true
        type: integer
      responses:
        200:
          description: success
  /users/{id}:
    get:
      tags:
      - READ
      summary: Find user by ID
      description: Returns list of users
      operationId: getUserById
      produces:
      - application/json
      - application/xml
      parameters:
      - name: id
        in: path
        description: user ID
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: success
          schema:
            $ref: '#/definitions/User'
        404:
          description: No user by that id
  /find/{name}:
    get:
      tags:
      - READ
      summary: Find user by username or email
      description: Returns list of users
      operationId: findUserBynameEmail
      produces:
      - application/json
      - application/xml
      parameters:
      - name: name
        in: path
        description: username or email
        required: true
        type: string
      responses:
        200:
          description: success
          schema:
            $ref: '#/definitions/User'
        404:
          description: No users found
  /find/projects/{project}:
    get:
      tags:
      - READ
      summary: Find project by project name
      description: Returns list of projects
      operationId: findProjectByName
      produces:
      - application/json
      - application/xml
      parameters:
      - name: name
        in: path
        description: project name
        required: true
        type: string
      responses:
        200:
          description: success
          schema:
            $ref: '#/definitions/Project'
        404:
          description: No projects found
  /find/skills/{skill}:
    get:
      tags:
      - READ
      summary: Find person who has spesific skill
      description: Returns list of users
      operationId: findPersoinWithSkill
      produces:
      - application/json
      - application/xml
      parameters:
      - name: name
        in: path
        description: skill name
        required: true
        type: string
      responses:
        200:
          description: success
          schema:
            $ref: '#/definitions/User'
        404:
          description: No skilled users found

  /members/{pid}:
    get:
      tags:
      - READ
      summary: Get project members by project id
      description: Returns list of users
      operationId: getProjectMembers
      produces:
      - application/json
      - application/xml
      parameters:
      - name: pid
        in: path
        description: project ID
        required: true
        type: integer
      responses:
        200:
          description: List of users
          schema:
            $ref: '#/definitions/User'
  /login/:
    post:
      tags:
      - READ
      summary: Login user
      operationId: loginUser
      produces:
      - application/json
      - application/xml
      parameters:
      - name: password
        in: body
        type: string
      - name: username
        in: body
        type: string
      responses:
        500:
          description: Could not log you in, credetials might be wrong
        201:
          description: userId, username, token

  /myprojects/{uid}:
    get:
      tags:
      - READ
      summary: Get user projects
      description: Returns list of user's projects
      operationId: getMyProjects
      produces:
      - application/json
      - application/xml
      parameters:
      - name: uid
        in: path
        description: user ID
        required: true
        type: integer
      responses:
        200:
          description: List of projects
          schema:
            $ref: '#/definitions/Project'    
        404:
          description: No projects found
  /user/{uid}/skills:
    get:
      tags:
      - READ
      summary: Get user skills
      description: Returns list of user's skills
      operationId: getUserSkills
      produces:
      - application/json
      - application/xml
      parameters:
      - name: uid
        in: path
        description: user ID
        required: true
        type: integer
      responses:
        200:
          description: List of skills
          schema:
            $ref: '#/definitions/Skill'    
        404:
          description: No skills added
  /skills/{skillname}:
    get:
      tags:
      - READ
      summary: Get skill id
      description: Returns skill ID of spesific skill name
      operationId: findSkillBySkillname
      produces:
      - application/json
      - application/xml
      parameters:
      - name: skillname
        in: path
        description: skill name
        required: true
        type: string
      responses:
        200:
          description: List of skills
          schema:
            $ref: '#/definitions/Skill'    
        404:
          description: 0

  
  /update/userdata/:
    patch:
      tags:
      - UPDATE
      summary: Update user data
      description: Update spesific user data field - school - bio - email - fname - lname
      operationId: updateUserField
      produces:
      - application/json
      - application/xml
      parameters:
      - name: item
        in: body
        description: item to be updated
        type: string
      - name: txt
        in: body
        description: new value for item
        type: string
      - name: uid
        in: body
        description: user id
        required: true
        type: integer
        
      responses:
        200:
          description: Data updated
        404:
          description: Data not updated, No action
        500:
          description: Data not updated
  /update/project/:
    patch:
      tags:
      - UPDATE
      summary: Update project data
      description: Update spesific project data field
                   - details - 
      operationId: updateProjectField
      produces:
      - application/json
      - application/xml
      parameters:
      - name: item
        in: body
        description: item to be updated
        type: string
      - name: txt
        in: body
        description: new value for item
        type: string
      - name: pid
        in: body
        description: project id
        required: true
        type: integer
        
      responses:
        200:
          description: Data updated
        404:
          description: Data not updated, No action
        500:
          description: Data not updated      
  /users/memberships/:
    delete:
      tags:
      - DELETE
      summary: Delete membership
      description: Remove user from project
      operationId: deleteUserMemberships
      produces:
      - application/json
      - application/xml
      parameters:
      - name: uid
        in: body
        description: user id
        required: true
        type: integer
      responses:
        200:
          description: success
        500:
          description: failed
  /users/talents/:
    delete:
      tags:
      - DELETE
      summary: Delete user's talents
      description: Remove all user talents
      operationId: deleteUserTalents
      produces:
      - application/json
      - application/xml
      parameters:
      - name: uid
        in: body
        description: user id
        required: true
        type: integer
      responses:
        200:
          description: success
        500:
          description: failed    

  /projects/empty/:
    delete:
      tags:
      - DELETE
      summary: Delete empty projects
      description: Delete project wtih no users
      operationId: deleteUserById
      produces:
      - application/json
      - application/xml
      responses:
        200:
          description: success
        500:
          description: failed   
  /project/:
    delete:
      tags:
      - DELETE
      summary: Delete project by ID
      description: Delete project by it's ID
      operationId: deleteProjectById
      produces:
      - application/json
      - application/xml
      parameters:
      - name: pid
        in: body
        description: project id
        required: true
        type: integer
      responses:
        200:
          description: success
        500:
          description: failed  

  /membership/:
    delete:
      tags:
      - DELETE
      summary: Delete membership
      description: Remove user from all projects
      operationId: deleteMembership
      produces:
      - application/json
      - application/xml
      parameters:
      - name: pid
        in: body
        description: skill id
        required: true
        type: integer
      - name: uid
        in: body
        description: user id
        required: true
        type: integer
      responses:
        200:
          description: success

securityDefinitions:
  petstore_auth:
    type: oauth2
    authorizationUrl: http://petstore.swagger.io/oauth/dialog
    flow: implicit
    scopes:
      write:pets: modify pets in your account
      read:pets: read your pets
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  Project:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: integer
        format: int64
      details:
        type: string
        format: text
      created:
        type: string
        format: date
      last_active:
        type: string
        format: date
    xml:
      name: Project
  Skill:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      category:
        type: string
    xml:
      name: Skill
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      password:
        type: string
      email:
        type: string
      school:
        type: string
      bio:
        type: string
      joined:
        type: string
        format: date
      fname:
        type: string
      lname:
        type: string
      custom_skills:
        type: string
      token:
        type: string
      selector:
        type: string
      title:
        type: string
    xml:
      name: User
  Talent:
    type: object
    properties:
      id:
        type: integer
        format: int64
      user_id:
        type: integer
        format: int64
      skill_id:
        type: integer
        format: int64
    xml:
      name: Talent
  Membership:
    type: object
    properties:
      id:
        type: integer
        format: int64
      user_id:
        type: integer
        format: int64
      project_id:
        type: integer
        format: int64
      role:
        type: string
    xml:
      name: Membership
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /Kurvinen/StudentIn/1.0.0
schemes:
 - https
 - http